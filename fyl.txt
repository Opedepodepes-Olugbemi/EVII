Codebase Analysis Steps:

1. Project Structure Analysis:
- Next.js project with TypeScript setup
- Uses Tailwind CSS for styling
- Has components/, app/, utils/ directories following Next.js conventions
- Contains proper TypeScript configuration (tsconfig.json)

2. Dependencies Overview:
- Built with Next.js 14.2.3
- React 18 as the core framework
- Uses Hume AI voice-react package (@humeai/voice-react)
- UI components from Radix UI
- Animation with Framer Motion
- Styling with Tailwind CSS
- TypeScript for type safety

3. Key Features:
- Voice-related functionality (based on Hume AI integration)
- Modern UI components with Radix UI
- Responsive design with Tailwind
- Type-safe development with TypeScript

4. Development Setup:
- Development server: npm run dev
- Build: npm run build
- Start: npm run start
- Linting: npm run lint

5. App Directory Structure:
- layout.tsx: Root layout component
- page.tsx: Main page component
- globals.css: Global styles
- error.tsx: Error handling component
- favicon.ico: Site favicon

6. Components Structure:
Main Components:
- Nav.tsx: Navigation component
- MicFFT.tsx: Microphone/audio visualization component
- Controls.tsx: UI controls component
- Expressions.tsx: Likely handles emotion/expression display
- Messages.tsx: Message display component
- Chat.tsx: Chat interface component
- SplineViewer.tsx: 3D model viewer component

Subdirectories:
- ui/: Contains reusable UI components
- logos/: Contains logo assets

7. Recent UI Updates:
New Components Added:
- GlowingOrb.tsx: Animated glowing orb visualization for voice activity
- ConversationPrompts.tsx: Pre-defined conversation prompt buttons
- SplineViewer.tsx: Interactive 3D model viewer

Chat.tsx Updates:
- Implemented dark theme with black background
- Added glowing green orb animation
- Added conversation prompts
- Implemented voice recording controls
- Added text input with send button
- Added Hume AI attribution in footer
- Replaced StartCall with Spline 3D viewer

Design Features:
- Clean, minimal dark interface
- Animated glowing orb for voice feedback
- Responsive layout with max-width containers
- Floating mic button and text input
- Pre-defined conversation prompts
- Clear visual feedback for voice activity
- Centered 3D model at bottom of screen 

8. Spline Integration Updates:
- Removed built-in spline-viewer tag
- Implemented custom Spline viewer using @splinetool/runtime
- Added canvas-based rendering for better performance
- Maintained centered positioning at bottom of screen
- Added proper cleanup on component unmount

Recent Changes (Latest):

1. Chat Drawer Implementation:
- Moved Messages component from Chat.tsx to ChatDrawer
- Implemented proper Sheet component for drawer functionality
- Added VoiceProvider context in drawer for message functionality
- Made drawer responsive with proper width and scrolling

2. Expression Animations:
- Added Framer Motion for smooth transitions
- Implemented fade animations between expression updates
- Added AnimatePresence for proper exit animations
- Used key-based re-rendering for smooth transitions

3. Chat.tsx Updates:
- Removed Messages component from main chat view
- Added ChatDrawer to Nav component
- Simplified main chat layout
- Maintained voice control functionality

These changes improve the UX by:
- Moving chat history to an accessible drawer
- Adding smooth transitions for expression updates
- Maintaining core voice functionality
- Better organizing the UI components

Latest fix for Vercel deployment error (TypeScript type error in Messages.tsx):

1. Fixed type safety issues in Messages.tsx
2. Improved null checking for message content
3. Used proper type assertions for expressions
4. Simplified state updates with proper typing
5. Used nullish coalescing operator for safer fallbacks
6. Restructured the message update logic for better type inference

The changes ensure that:
- content is always a string as required by VisibleMessage interface
- expressions are properly typed as Record<string, number>
- State updates maintain type safety throughout the component

Latest fix - Type assertion for expressions:
1. Added type assertion to convert EmotionScores to Record<string, number>
2. Used fallback empty object with type assertion for null/undefined cases

Latest fix - Added proper type definitions:
1. Added EmotionScores type definition with string index signature
2. This ensures compatibility between EmotionScores and Record<string, number>
3. Package manager (pnpm) is working correctly - issue was with types

Package Manager Consistency Fix:
1. Project was set up with pnpm, should continue using pnpm
2. Mixing package managers (npm vs pnpm) can cause:
   - Slower builds
   - Dependency resolution issues
   - Lock file conflicts
3. Solution:
   - Remove node_modules and lock files
   - Reinstall with pnpm
   - Use pnpm for all commands

React Hydration Error Fix:
1. Added mounted state to handle client-side rendering
2. Replaced useLayoutEffect with useEffect
3. Added initial render state to prevent hydration mismatch
4. Simplified dark mode initialization
5. Removed redundant else condition in theme check

Changes ensure:
- Consistent server/client rendering
- No content mismatch during hydration
- Proper theme initialization
- Clean initial render state

Access Token Build Error Fix:
1. Made chat page dynamic with 'force-dynamic' directive
2. Added revalidate=0 to prevent caching
3. Improved error handling:
   - Added try-catch block
   - Redirects to home on error
   - Proper error logging
4. Prevents build-time pre-rendering issues
5. Ensures access token is handled at runtime

Deployment Steps:
1. Environment Cleanup:
   - Remove node_modules
   - Remove lock files
   - Clear caches

2. Fresh Installation:
   - Use pnpm exclusively
   - Install dependencies
   - Verify package versions

3. Build Process:
   - Local build test
   - Environment variable setup
   - Vercel configuration

4. Deployment:
   - Push changes
   - Monitor build logs
   - Clear build cache if needed

Key Points:
- Use pnpm consistently
- Verify environment variables
- Test locally before deploying
- Monitor build process
- Clear cache if issues persist

Access Token and Build Error Fixes:

1. Token Utility Improvements:
   - Added proper error handling
   - Better validation of API credentials
   - Improved error messages
   - Safer token validation

2. Chat Page Updates:
   - Enforced dynamic rendering
   - Disabled page caching
   - Streamlined error handling
   - Proper redirection on errors

3. Required Environment Variables:
   - HUME_API_KEY
   - HUME_SECRET_KEY

Next Steps:
1. Add these environment variables in Vercel:
   - Go to Project Settings
   - Environment Variables section
   - Add HUME_API_KEY and HUME_SECRET_KEY
2. Redeploy after adding variables